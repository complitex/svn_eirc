<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ru.flexpay.eirc.registry.service.RegistryRecordBean">
    <cache type="org.complitex.dictionary.mybatis.caches.EhcacheCache"/>

    <resultMap id="RegistryRecord" type="ru.flexpay.eirc.registry.entity.RegistryRecord">
        <result column="registry_record_id"                         property="id"/>
        <result column="registry_record_service_code"               property="serviceCode"/>
        <result column="registry_record_personal_account_ext"       property="personalAccountExt"/>
        <result column="registry_record_city_type"                  property="cityType"/>
        <result column="registry_record_city"                       property="city"/>
        <result column="registry_record_street_type"                property="streetType"/>
        <result column="registry_record_street"                     property="street"/>
        <result column="registry_record_building_number"            property="buildingNumber"/>
        <result column="registry_record_bulk_number"                property="buildingCorp"/>
        <result column="registry_record_apartment_number"           property="apartment"/>
        <result column="registry_record_room_number"                property="room"/>
        <result column="registry_record_first_name"                 property="firstName"/>
        <result column="registry_record_middle_name"                property="middleName"/>
        <result column="registry_record_last_name"                  property="lastName"/>
        <result column="registry_record_operation_date"             property="operationDate"/>
        <result column="registry_record_unique_operation_number"    property="uniqueOperationNumber"/>
        <result column="registry_record_amount"                     property="amount"/>
        <result column="registry_record_registry_id"                property="registryId"/>
        <result column="registry_record_city_type_id"               property="cityTypeId"/>
        <result column="registry_record_city_id"                    property="cityId"/>
        <result column="registry_record_street_type_id"             property="streetTypeId"/>
        <result column="registry_record_street_id"                  property="streetId"/>
        <result column="registry_record_building_id"                property="buildingId"/>
        <result column="registry_record_apartment_id"               property="apartmentId"/>
        <result column="registry_record_room_id"                    property="roomId"/>
        <result column="registry_record_status"                     property="status" typeHandler="org.complitex.dictionary.mybatis.FixedIdBaseTypeHandler"/>
        <result column="registry_record_import_error_type"          property="importErrorType" typeHandler="org.complitex.dictionary.mybatis.FixedIdBaseTypeHandler"/>


        <association property="containers" columnPrefix="registry_record_container_"
                     resultMap="ru.flexpay.eirc.registry.service.ContainerBean.Container"/>

    </resultMap>

    <resultMap id="StatusDetailInfo" type="ru.flexpay.eirc.registry.entity.StatusDetailInfo">
        <result column="count" property="count"/>
        <result column="status" property="status" typeHandler="org.complitex.dictionary.mybatis.FixedIdBaseTypeHandler"/>
        <result column="import_error_exist" property="importErrorExist"/>
    </resultMap>

    <resultMap id="ImportErrorDetailInfo" type="ru.flexpay.eirc.registry.entity.ImportErrorDetailInfo">
        <result column="count" property="count"/>
        <result column="import_error_type" property="importErrorType" typeHandler="org.complitex.dictionary.mybatis.FixedIdBaseTypeHandler"/>
    </resultMap>

    <resultMap id="ImportErrorDetail" type="ru.flexpay.eirc.registry.entity.ImportErrorDetail">
        <result column="value" property="id"/>
        <result column="count" property="count"/>

        <association property="details" javaType="map">
            <result column="city" property="city"/>
            <result column="street_type" property="streetType"/>
            <result column="street" property="street"/>
            <result column="building_number" property="buildingNumber"/>
            <result column="bulk_number" property="buildingCorp"/>
            <result column="apartment_number" property="apartment"/>
            <result column="room_number" property="room"/>
        </association>
    </resultMap>

    <sql id="registryRecordColumns">
        rr.`id`                       as `registry_record_id`,
        rr.`service_code`             as `registry_record_service_code`,
        rr.`personal_account_ext`     as `registry_record_personal_account_ext`,
        rr.`city_type`                as `registry_record_city_type`,
        rr.`city`                     as `registry_record_city`,
        rr.`street_type`              as `registry_record_street_type`,
        rr.`street`                   as `registry_record_street`,
        rr.`building_number`          as `registry_record_building_number`,
        rr.`bulk_number`              as `registry_record_bulk_number`,
        rr.`apartment_number`         as `registry_record_apartment_number`,
        rr.`room_number`              as `registry_record_room_number`,
        rr.`first_name`               as `registry_record_first_name`,
        rr.`middle_name`              as `registry_record_middle_name`,
        rr.`last_name`                as `registry_record_last_name`,
        rr.`operation_date`           as `registry_record_operation_date`,
        rr.`unique_operation_number`  as `registry_record_unique_operation_number`,
        rr.`amount`                   as `registry_record_amount`,
        rr.`status`                   as `registry_record_status`,
        rr.`import_error_type`        as `registry_record_import_error_type`,
        rr.`registry_id`              as `registry_record_registry_id`,
        rr.`city_type_id`             as `registry_record_city_type_id`,
        rr.`city_id`                  as `registry_record_city_id`,
        rr.`street_type_id`           as `registry_record_street_type_id`,
        rr.`street_id`                as `registry_record_street_id`,
        rr.`building_id`              as `registry_record_building_id`,
        rr.`apartment_id`             as `registry_record_apartment_id`,
        rr.`room_id`                  as `registry_record_room_id`
    </sql>

    <sql id="registryRecordContainerColumns">
        rrc.`id`                      as `registry_record_container_id`,
        rrc.`data`                    as `registry_record_container_data`,
        rrc.`type`                    as `registry_record_container_type`
    </sql>

    <sql id="registryRecordContainerJoin">
        left join `registry_record_container` rrc on rrc.`record_id` = rr.`registry_record_id`
    </sql>

    <sql id="registryRecordCondition">
        <if test="object != null">
            <if test="object.cityType != null">
                and rr.`city_type` <choose><when test="like">like concat('%', #{object.cityType}, '%') </when><otherwise>= #{object.cityType}</otherwise></choose>
            </if>
            <if test="object.city != null">
                and rr.`city` <choose><when test="like">like concat('%', #{object.city}, '%') </when><otherwise>= #{object.city}</otherwise></choose>
            </if>
            <if test="object.streetType != null">
                and rr.`street_type` <choose><when test="like">like concat('%', #{object.streetType}, '%') </when><otherwise>= #{object.streetType}</otherwise></choose>
            </if>
            <if test="object.street != null">
                and rr.`street` <choose><when test="like">like concat('%', #{object.street}, '%') </when><otherwise>= #{object.street}</otherwise></choose>
            </if>
            <if test="object.buildingNumber != null">
                and rr.`building_number` <choose><when test="like">like concat('%', #{object.buildingNumber}, '%') </when><otherwise>= #{object.buildingNumber}</otherwise></choose>
            </if>
            <if test="object.buildingCorp != null">
                and rr.`bulk_number` <choose><when test="like">like concat('%', #{object.buildingCorp}, '%') </when><otherwise>= #{object.buildingCorp}</otherwise></choose>
            </if>
            <if test="object.apartment != null">
                and rr.`apartment_number` <choose><when test="like">like concat('%', #{object.apartment}, '%') </when><otherwise>= #{object.apartment}</otherwise></choose>
            </if>
            <if test="object.room != null">
                and rr.`room_number` <choose><when test="like">like concat('%', #{object.room}, '%') </when><otherwise>= #{object.apartment}</otherwise></choose>
            </if>

            <if test="object.firstName != null">
                and rr.`first_name` <choose><when test="like">like concat('%', #{object.firstName}, '%') </when><otherwise>= #{object.firstName}</otherwise></choose>
            </if>
            <if test="object.lastName != null">
                and rr.`last_name` <choose><when test="like">like concat('%', #{object.lastName}, '%') </when><otherwise>= #{object.lastName}</otherwise></choose>
            </if>
            <if test="object.middleName != null">
                and rr.`middle_name` <choose><when test="like">like concat('%', #{object.middleName}, '%') </when><otherwise>= #{object.middleName}</otherwise></choose>
            </if>

            <if test="object.status != null">
                and rr.`status` = #{object.status.id}
            </if>

            <if test="object.importErrorType != null">
                and rr.`import_error_type` = #{object.importErrorType.id}
            </if>

            <if test="object.registryId != null">
                and rr.`registry_id` = #{object.registryId}
            </if>

            <if test="object.amount != null">
                and rr.`amount` = #{object.amount}
            </if>

            <if test="map.operationDateRange != null">
                and (rr.`operation_date` between #{map.operationDateRange.start} and #{map.operationDateRange.end})
            </if>
        </if>
    </sql>

    <sql id="registryRecordFioSort">
        rr.`last_name`
        <if test="asc">
            ${asc}
        </if>,
        rr.`first_name`
        <if test="asc">
            ${asc}
        </if>,
        rr.`middle_name`
    </sql>

    <select id="selectRegistryRecords" parameterType="org.complitex.dictionary.entity.FilterWrapper" resultMap="RegistryRecord">

        select rr.*,
        <include refid="registryRecordContainerColumns"/>
        from (
        select
        <include refid="registryRecordColumns"/>
        from `registry_record` rr
        where 1=1
        <include refid="registryRecordCondition"/>

        <if test="sortProperty != null">
            order by
            <choose>
                <when test="sortProperty == 'registry_record_fio'">
                    <include refid="registryRecordFioSort"/>
                </when>
                <otherwise>
                    ${sortProperty}
                </otherwise>
            </choose>
            <if test="asc">
                ${asc}
            </if>
        </if>

        <if test="count > 0">
            limit ${first},${count}
        </if>
        ) rr
        <include refid="registryRecordContainerJoin"/>

    </select>

    <select id="countRegistryRecords" parameterType="org.complitex.dictionary.entity.FilterWrapper" resultType="integer">

        select
          count(rr.`id`)
        from `registry_record` rr
        where 1=1
        <include refid="registryRecordCondition"/>

    </select>

    <select id="selectRecordsToProcessing" parameterType="org.complitex.dictionary.entity.FilterWrapper" resultMap="RegistryRecord">

        select rr.*,
        <include refid="registryRecordContainerColumns"/>
        from (select
        <include refid="registryRecordColumns"/>
        from `registry_record` rr
        where 5 >= rr.`status` and rr.`status` >= 4 and rr.`registry_id` = #{object.registryId} and rr.`id` >= ${first}
        order by rr.`id`
        limit 0, ${count}) rr
        left join `registry_record_container` rrc on rrc.`record_id` = rr.`registry_record_id`

    </select>

    <select id="selectRecordsToLinking" parameterType="org.complitex.dictionary.entity.FilterWrapper" resultMap="RegistryRecord">

        select rr.*,
        <include refid="registryRecordContainerColumns"/>
        from (select
        <include refid="registryRecordColumns"/>
        from `registry_record` rr
        where 3 >= rr.`status` and rr.`status` >= 2 and rr.`registry_id` = #{object.registryId} and rr.`id` >= ${first}
        order by rr.`id`
        limit 0, ${count}) rr
        left join `registry_record_container` rrc on rrc.`record_id` = rr.`registry_record_id`

    </select>


    <select id="selectCorrectionRecordsToLinking" parameterType="org.complitex.dictionary.entity.FilterWrapper" resultMap="RegistryRecord">

        select rr.*,
        <include refid="registryRecordContainerColumns"/>
        from (select
        <include refid="registryRecordColumns"/>
        from `registry_record` rr
        where rr.`status` = 3 and
        <choose>
            <when test="object.roomId != null">
                <choose>
                    <when test="object.apartmentId != null">
                        rr.`apartment_id` = #{object.apartmentId} and
                    </when>
                    <otherwise>
                        rr.`building_id` = #{object.buildingId} and
                    </otherwise>
                </choose>
                rr.`room_number` = #{object.room} and
            </when>
            <when test="object.apartmentId != null">
                rr.`building_id` = #{object.buildingId} and rr.`apartment_number` = #{object.apartment} and
            </when>
            <when test="object.buildingId != null">
                rr.`street_id` = #{object.streetId} and rr.`building_number` = #{object.buildingNumber} and
                <choose>
                    <when test="object.buildingCorp != null">
                        rr.`bulk_number` = #{object.buildingCorp} and
                    </when>
                    <otherwise>
                        rr.`bulk_number` is null and
                    </otherwise>
                </choose>
            </when>
            <when test="object.streetId != null">
                rr.`city_id` = #{object.cityId} and rr.`street_type_id` = #{object.streetTypeId} and rr.`street` = #{object.street} and
            </when>
            <when test="object.streetTypeId != null">
                rr.`street_type` = #{object.streetType} and
            </when>
            <when test="object.cityId != null">
                rr.`city` = #{object.city} and
                <choose>
                    <when test="object.cityTypeId != null">
                        rr.`city_type_id` = #{object.cityTypeId} and
                    </when>
                    <otherwise>
                        rr.`city_type_id` is null and
                    </otherwise>
                </choose>
            </when>
            <when test="object.cityTypeId != null">
                rr.`city_type` = #{object.cityType} and
            </when>
        </choose>
        rr.`registry_id` = #{object.registryId} and rr.`id` >= ${first}
        order by rr.`id`
        limit 0, ${count}) rr
        left join `registry_record_container` rrc on rrc.`record_id` = rr.`registry_record_id`

    </select>

    <select id="hasRecordsToProcessing" parameterType="Long" resultType="Integer">
        select 1 from `registry_record` where 5 >= `status` and `status` >= 4 and `registry_id` = #{registryId} limit 0, 1
    </select>

    <select id="hasRecordsToLinking" parameterType="Long" resultType="Integer">
        select 1 from `registry_record` where 3 >= `status` and `status` >= 2 and `registry_id` = #{registryId} limit 0, 1
    </select>

    <insert id="insertRegistryRecord" parameterType="ru.flexpay.eirc.registry.entity.RegistryRecord" keyProperty="id" useGeneratedKeys="true">
        insert into `registry_record`
        (
            service_code,
            personal_account_ext,
            city_type,
            city,
            street_type,
            street,
            building_number,
            bulk_number,
            apartment_number,
            room_number,
            first_name,
            middle_name,
            last_name,
            operation_date,
            unique_operation_number,
            amount,
            status,
            import_error_type,
            registry_id
        ) values (
            #{serviceCode}, #{personalAccountExt}, #{cityType}, #{city}, #{streetType}, #{street}, #{buildingNumber},
            #{buildingCorp}, #{apartment}, #{room}, #{firstName}, #{middleName}, #{lastName}, #{operationDate},
            #{uniqueOperationNumber}, #{amount}, #{status.id},
            <choose>
                <when test="importErrorType != null">#{importErrorType.id}</when>
                <otherwise>null</otherwise>
            </choose>,
            #{registryId}
        )
    </insert>

    <insert id="insertRegistryRecords" parameterType="ru.flexpay.eirc.registry.entity.RegistryRecord" keyProperty="id"
            keyColumn="id" useGeneratedKeys="true">
        insert into `registry_record`
        (
            service_code,
            personal_account_ext,
            city_type,
            city,
            street_type,
            street,
            building_number,
            bulk_number,
            apartment_number,
            room_number,
            first_name,
            middle_name,
            last_name,
            operation_date,
            unique_operation_number,
            amount,
            status,
            import_error_type,
            registry_id
        ) values
        <foreach collection="registryRecords" separator="," item="rr" index="index">
            (
                #{rr.serviceCode}, #{rr.personalAccountExt}, #{rr.cityType}, #{rr.city}, #{rr.streetType}, #{rr.street},
                #{rr.buildingNumber}, #{rr.buildingCorp}, #{rr.apartment}, #{rr.room},
                #{rr.firstName}, #{rr.middleName}, #{rr.lastName}, #{rr.operationDate}, #{rr.uniqueOperationNumber},
                #{rr.amount}, #{rr.status.id},
                <choose>
                    <when test="rr.importErrorType != null">#{rr.importErrorType.id}</when>
                    <otherwise>null</otherwise>
                </choose>,
                #{rr.registryId}
            )
        </foreach>
        <!--selectKey resultType="long" order="AFTER" keyProperty="id">
            SELECT LAST_INSERT_ID() as id
        </selectKey-->
    </insert>

    <insert id="insertRegistryRecordContainers" parameterType="list">
        insert into `registry_record_container` (`data`, `record_id`, `type`)
        values
        <foreach collection="list" separator="," item="rrc" index="index">
          (#{rrc.data}, #{rrc.parentId}, #{rrc.type.id})
        </foreach>
    </insert>

    <insert id="insertRegistryRecordContainer" parameterType="ru.flexpay.eirc.registry.entity.Container"
            keyProperty="container.id" useGeneratedKeys="true">
        insert into `registry_record_container` (`data`, `record_id`, `type`) value (#{data}, #{parentId}, #{type.id})
    </insert>

    <update id="updateRegistryRecord" parameterType="ru.flexpay.eirc.registry.entity.RegistryRecord">
        update `registry_record`
        set `status` = #{status.id}, `city_type_id` = #{cityTypeId}, `city_id` = #{cityId},
            `street_type_id` = #{streetTypeId}, `street_id` = #{streetId},
            `building_id` = #{buildingId}, `apartment_id` = #{apartmentId}, `room_id` = #{roomId}
        <choose>
            <when test="importErrorType != null">, `import_error_type` = #{importErrorType.id}</when>
            <otherwise>, `import_error_type` = null</otherwise>
        </choose>
        where `id`=#{id}
    </update>

    <select id="selectStatusStatistics" parameterType="ru.flexpay.eirc.registry.entity.RegistryRecordData" resultMap="StatusDetailInfo" useCache="true">
        select count(1) `count`, `status`, IF (max(`import_error_type`) is null,FALSE,TRUE) `import_error_exist`
                from `registry_record` where `registry_id`=#{registryId} group by `status` order by `count` desc
    </select>

    <select id="selectImportErrorStatistics" parameterType="ru.flexpay.eirc.registry.entity.RegistryRecordData" resultMap="ImportErrorDetailInfo" useCache="true">
        select count(1) `count`, `import_error_type` from `registry_record` where `registry_id` = #{registryId} and `status` = #{status.id}
                group by `import_error_type` order by `count` desc;
    </select>

    <select id="selectAddressErrorStatistics" parameterType="ru.flexpay.eirc.registry.entity.RegistryRecordData" resultMap="ImportErrorDetail" useCache="true">
        select count(1) `count`,
                <choose>
                    <when test="importErrorType.id == 1 or importErrorType.id == 7 or importErrorType.id == 12">
                        `city` as `value`,
                        `city_type`,
                        `city`
                    </when>
                    <when test="importErrorType.id == 2 or importErrorType.id == 8 or importErrorType.id == 13">
                        `street_type` as `value`,
                        street_type
                    </when>
                    <when test="importErrorType.id == 3 or importErrorType.id == 9 or importErrorType.id == 14">
                        CONCAT(`city`, `street_type`, `street`) as `value`,
                        `city_type`,
                        `city`,
                        `street_type`,
                        `street`
                    </when>
                    <when test="importErrorType.id == 4 or importErrorType.id == 5 or importErrorType.id == 10 or importErrorType.id == 15">
                        CONCAT(`city`, `street_type`, `street`, `building_number`, `bulk_number`) as `value`,
                        `city_type`,
                        `city`,
                        `street_type`,
                        `street`,
                        `building_number`,
                        `bulk_number`
                    </when>
                    <when test="importErrorType.id == 6 or importErrorType.id == 11 or importErrorType.id == 16">
                        CONCAT(`city`, `street_type`, `street`, `building_number`, `bulk_number`, `apartment_number`) as `value`,
                        `city_type`,
                        `city`,
                        `street_type`,
                        `street`,
                        `building_number`,
                        `bulk_number`,
                        `apartment_number`
                    </when>
                    <when test="importErrorType.id == 19 or importErrorType.id == 20 or importErrorType.id == 21">
                        CONCAT(`city`, `street_type`, `street`, `building_number`, `bulk_number`, `apartment_number`, `room_number`) as `value`,
                        `city_type`,
                        `city`,
                        `street_type`,
                        `street`,
                        `building_number`,
                        `bulk_number`,
                        `apartment_number`,
                        `room_number`
                    </when>
                </choose>

                from registry_record
                where `registry_id` = #{registryId} and `status` = #{status.id} and `import_error_type`= #{importErrorType.id}
                group by `value` order by `count` desc;
    </select>

</mapper>