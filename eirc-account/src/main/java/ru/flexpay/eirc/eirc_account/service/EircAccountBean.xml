<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ru.flexpay.eirc.eirc_account.service.EircAccountBean">

    <cache type="org.complitex.dictionary.mybatis.caches.EhcacheCache"/>
    <!--cache-ref namespace="ru.flexpay.eirc.service_provider_account.service.ServiceProviderAccountBean"/-->

    <resultMap id="EircAccount" type="ru.flexpay.eirc.eirc_account.entity.EircAccount">
        <id column="eirc_account_pk_id" property="pkId"/>
        <result column="eirc_account_object_id" property="id"/>
        <result column="eirc_account_number" property="accountNumber"/>
        <result column="eirc_account_begin_date" property="beginDate"/>
        <result column="eirc_account_end_date" property="endDate"/>

        <association property="address" resultMap="Address"
                     columnPrefix="eirc_account_"/>

        <association property="person" resultMap="ru.flexpay.eirc.dictionary.entity.PersonBean.Person"
                     columnPrefix="eirc_account_"/>
    </resultMap>

    <resultMap id="Address" type="ru.flexpay.eirc.dictionary.entity.Address">
        <id column="address_id" property="id"/>
        <result column="address_entity_id" property="entityId"/>
        <result column="city_type" property="cityType"/>
        <result column="city" property="city"/>
        <result column="street_type" property="streetType"/>
        <result column="street" property="street"/>
        <result column="building" property="building"/>
        <result column="apartment" property="apartment"/>
        <result column="room" property="room"/>
    </resultMap>

    <sql id="apartmentCultureJoin">
        inner join `apartment_attribute` aa on aa.`object_id` = a.`object_id`
        inner join `apartment_string_culture` ac on ac.`id` = aa.`value_id`
    </sql>

    <sql id="buildingAddressCultureJoin">
        inner join `building_address` ba on ba.`object_id` = b.`parent_id`
        inner join `building_address_attribute` baa on baa.`object_id` = b.`parent_id`
        inner join `building_address_string_culture` bac on bac.`id` = baa.`value_id`
    </sql>

    <sql id="streetCultureJoin">
        inner join `street` s on s.`object_id` = ba.`parent_id`
        inner join `street_attribute` sa on sa.`object_id` = ba.`parent_id`
        inner join `street_string_culture` sc on sc.`id` = sa.`value_id`
    </sql>

    <sql id="streetTypeCultureJoin">
        inner join `street_type` st on st.`object_id` = s.`parent_id`
        inner join `street_type_attribute` sta on sta.`object_id` = s.`parent_id`
        inner join `street_type_string_culture` stc on stc.`id` = sta.`value_id`
    </sql>

    <sql id="addressCultureJoin">
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.buildingAddressCultureJoin"/>
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.streetCultureJoin"/>
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.streetTypeCultureJoin"/>
    </sql>

    <select id="selectAddress" resultMap="Address" parameterType="map">
        select #{id} as `id`, #{entityId}  as `entity_id`, stc.`value` as `street_type`, sc.`value` as `street`, bac.`value` as `building`
         <choose>
             <when test="entityId == 500">
                 , null as `apartment`, null as `room`
                 from `building` b
                 <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressCultureJoin"/>
                 where b.`object_id` = #{id} and
             </when>
             <when test="entityId == 100">
                 , ac.`value` as `apartment`, null as `room`
                 from `apartment` a
                 <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.apartmentCultureJoin"/>
                 inner join `building` b on b.`object_id` = a.`parent_id`
                 <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressCultureJoin"/>
                 where a.`object_id` = #{id} and aa.`end_date` is null and
             </when>
             <when test="entityId == 200">
                 , ac.`value` as `apartment`, rc.`value` as `room`
                 from `room` r
                 inner join `room_attribute` ra on r.`object_id` = ra.`object_id`
                 inner join `room_string_culture` rc on rc.`id` = ra.`value_id`
                 left inner join `apartment` a on a.`object_id` = r.`parent_id` and r.`parent_entity_id` = 100
                 <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.apartmentCultureJoin"/>
                 inner join `building` b on (b.`object_id` = r.`parent_id` and r.`parent_entity_id` = 500 or b.`object_id` = a.`parent_id`)
                 <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressCultureJoin"/>
                 where r.`object_id` = #{id} and ra.`end_date` is null and aa.`end_date` is null and
             </when>
         </choose>baa.`end_date` is null and
                  sa.`end_date`  is null and sa.`attribute_type_id` = 300 and
                  sta.`end_date` is null and sta.`attribute_type_id` = 1400
    </select>

    <sql id="roomJoin">
        left join `room` room on room.`object_id` = e.`address_id` and e.`address_entity_id` = 200
    </sql>

    <sql id="roomCondition">
        room.`object_id` = #{map.eircAccount.address.id}
    </sql>

    <sql id="apartmentJoin">
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.roomJoin"/>

        left join `apartment` apartment1 on apartment1.`object_id` = room.`parent_id` and room.`parent_entity_id` = 100
        left join `apartment` apartment2 on apartment2.`object_id` = e.`address_id` and e.`address_entity_id` = 100
    </sql>

    <sql id="apartmentCondition">
        (apartment1.`object_id` = #{map.eircAccount.address.id} or apartment2.`object_id` = #{map.eircAccount.address.id})
    </sql>

    <sql id="buildingJoin">
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.apartmentJoin"/>

        left join `building` building1 on building1.`object_id` = apartment1.`parent_id`
        left join `building` building2 on building2.`object_id` = apartment2.`parent_id`
        left join `building` building3 on building3.`object_id` = room.`parent_id` and room.`parent_entity_id` = 500
        left join `building` building4 on building4.`object_id` = e.`address_id` and e.`address_entity_id` = 500
    </sql>

    <sql id="buildingCondition">
         (building1.`object_id` = #{map.eircAccount.address.id} or building2.`object_id` = #{map.eircAccount.address.id} or
          building3.`object_id` = #{map.eircAccount.address.id} or building4.`object_id` = #{map.eircAccount.address.id})
    </sql>

    <sql id="buildingAddressJoin">
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.buildingJoin"/>

        left join `building_address` building_a1 on building_a1.`object_id` = building1.`parent_id`
        left join `building_address` building_a2 on building_a2.`object_id` = building2.`parent_id`
        left join `building_address` building_a3 on building_a3.`object_id` = building3.`parent_id`
        left join `building_address` building_a4 on building_a4.`object_id` = building4.`parent_id`
    </sql>

    <sql id="buildingAddressCondition">
        (building_a1.`object_id` = #{map.eircAccount.address.id} or building_a2.`object_id` = #{map.eircAccount.address.id} or
         building_a3.`object_id` = #{map.eircAccount.address.id} or building_a4.`object_id` = #{map.eircAccount.address.id})
    </sql>

    <sql id="streetJoin">
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.buildingAddressJoin"/>

        left join `street` street1 on street1.`object_id` = building_a1.`parent_id`
        left join `street` street2 on street2.`object_id` = building_a2.`parent_id`
        left join `street` street3 on street3.`object_id` = building_a3.`parent_id`
        left join `street` street4 on street4.`object_id` = building_a4.`parent_id`
    </sql>

    <sql id="streetCondition">
        (street1.`object_id` = #{map.eircAccount.address.id} or street2.`object_id` = #{map.eircAccount.address.id} or street3.`object_id` = #{map.eircAccount.address.id} or street4.`object_id` = #{map.eircAccount.address.id})
    </sql>

    <sql id="cityJoin">
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.streetJoin"/>

        left join `city` city1 on city1.`object_id` = street1.`parent_id`
        left join `city` city2 on city2.`object_id` = street2.`parent_id`
        left join `city` city3 on city3.`object_id` = street3.`parent_id`
        left join `city` city4 on city4.`object_id` = street4.`parent_id`
    </sql>

    <sql id="cityCondition">
        (city1.`object_id` = #{map.eircAccount.address.id} or city2.`object_id` = #{map.eircAccount.address.id} or city3.`object_id` = #{map.eircAccount.address.id} or city4.`object_id` = #{map.eircAccount.address.id})
    </sql>

    <sql id="regionJoin">
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.cityJoin"/>

        left join `region` region1 on region1.`object_id` = city1.`parent_id`
        left join `region` region2 on region2.`object_id` = city2.`parent_id`
        left join `region` region3 on region3.`object_id` = city3.`parent_id`
        left join `region` region4 on region4.`object_id` = city4.`parent_id`
    </sql>

    <sql id="regionCondition">
        (region1.`object_id` = #{map.eircAccount.address.id} or region2.`object_id` = #{map.eircAccount.address.id} or region3.`object_id` = #{map.eircAccount.address.id} or region4.`object_id` = #{map.eircAccount.address.id})
    </sql>

    <sql id="countryJoin">
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.regionJoin"/>

        left join `country` country1 on country1.`object_id` = region1.`parent_id`
        left join `country` country2 on country2.`object_id` = region2.`parent_id`
        left join `country` country3 on country3.`object_id` = region3.`parent_id`
        left join `country` country4 on country4.`object_id` = region4.`parent_id`
    </sql>

    <sql id="countryCondition">
        (country1.`object_id` = #{map.eircAccount.address.id} or country2.`object_id` = #{map.eircAccount.address.id} or country3.`object_id` = #{map.eircAccount.address.id} or country4.`object_id` = #{map.eircAccount.address.id})
    </sql>

    <sql id="addressJoin">
        <choose>
            <when test="map.address == true">
                <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.countryJoin"/>
                <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressJoinCulture"/>
            </when>
            <when test="map.eircAccount != null and map.eircAccount.address != null and map.eircAccount.address.entity != null">
                <choose>
                    <when test="map.eircAccount.address.entity.id == 200">
                        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.roomJoin"/>
                    </when>
                    <when test="map.eircAccount.address.entity.id == 100">
                        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.apartmentJoin"/>
                    </when>
                    <when test="map.eircAccount.address.entity.id == 500">
                        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.buildingJoin"/>
                    </when>
                    <when test="map.eircAccount.address.entity.id == 400">
                        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.cityJoin"/>
                    </when>
                    <when test="map.eircAccount.address.entity.id == 700">
                        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.regionJoin"/>
                    </when>
                    <when test="map.eircAccount.address.entity.id == 800">
                        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.countryJoin"/>
                    </when>
                </choose>
            </when>
        </choose>
    </sql>

    <sql id="showModeCondition">
        <choose>
            <when test="map.inactive == true">
                e.`end_date` is not null
            </when>
            <when test="map.all == true">
                1 = 1
            </when>
            <otherwise>
                e.`end_date` is null
            </otherwise>
        </choose>
    </sql>

    <sql id="addressCondition">
        <if test="map.eircAccount != null and map.eircAccount.address != null and map.eircAccount.address.entity != null and map.eircAccount.address.id != null">
            and
            <choose>
                <when test="map.eircAccount.address.entity.id == 200">
                    <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.roomCondition"/>
                </when>
                <when test="map.eircAccount.address.entity.id == 100">
                    <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.apartmentCondition"/>
                </when>
                <when test="map.eircAccount.address.entity.id == 500">
                    <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.buildingCondition"/>
                </when>
                <when test="map.eircAccount.address.entity.id == 300">
                    <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.streetCondition"/>
                </when>
                <when test="map.eircAccount.address.entity.id == 400">
                    <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.cityCondition"/>
                </when>
                <when test="map.eircAccount.address.entity.id == 700">
                    <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.regionCondition"/>
                </when>
                <when test="map.eircAccount.address.entity.id == 800">
                    <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.countryCondition"/>
                </when>
            </choose>
        </if>
        <if test="map.address == true">
            and ra.`end_date`  is null and aa.`end_date`  is null and baa.`end_date` is null and sa1.`end_date` is null
            and sa2.`end_date` is null and sta.`end_date` is null and ca1.`end_date` is null and ca2.`end_date` is null
            and cta.`end_date` is null
        </if>
    </sql>

    <sql id="addressJoinCulture">
        left join `room_attribute` ra on
            (ra.`object_id` = room.`object_id`)
        left join `room_string_culture` rc on (rc.`id` = ra.`value_id` and rc.`locale_id`  = #{locale.id})

        left join `apartment_attribute` aa on
            (aa.`object_id` = apartment1.`object_id` or aa.`object_id` = apartment2.`object_id`)
        left join `apartment_string_culture` ac on ac.`id` = aa.`value_id`

        left join `building_address_attribute` baa on
            (baa.`object_id` = building_a1.`object_id` or baa.`object_id` = building_a2.`object_id` or
             baa.`object_id` = building_a3.`object_id` or baa.`object_id` = building_a4.`object_id`)
        left join `building_address_string_culture` bac on (bac.`id` = baa.`value_id` and bac.`locale_id`  = #{locale.id})

        left join `street_attribute` sa1 on
            ((sa1.`object_id` = street1.`object_id` or sa1.`object_id` = street2.`object_id` or
              sa1.`object_id` = street3.`object_id` or sa1.`object_id` = street4.`object_id`) and sa1.`value_type_id` = 300)
        left join `street_string_culture` sc on (sc.`id` = sa1.`value_id` and sc.`locale_id`  = #{locale.id})

        left join `street_attribute` sa2 on
            ((sa2.`object_id` = street1.`object_id` or sa2.`object_id` = street2.`object_id` or
             sa2.`object_id` = street3.`object_id` or sa2.`object_id` = street4.`object_id`) and sa2.`value_type_id` = 301)
        left join `street_type` st on st.`object_id` = sa2.`value_id`
        left join `street_type_attribute` sta on (sta.`object_id` = st.`object_id` and sta.`value_type_id` = 1400)
        left join `street_type_string_culture` stc on (stc.`id` = sta.`value_id` and stc.`locale_id`  = #{locale.id})

        left join `city_attribute` ca1 on
            ((ca1.`object_id` = city1.`object_id` or ca1.`object_id` = city2.`object_id` or
             ca1.`object_id` = city3.`object_id` or ca1.`object_id` = city4.`object_id`) and ca1.`value_type_id` = 400)
        left join `city_string_culture` cc on (cc.`id` = ca1.`value_id` and cc.`locale_id`  = #{locale.id})

        left join `city_attribute` ca2 on
            ((ca2.`object_id` = city1.`object_id` or ca2.`object_id` = city2.`object_id` or
             ca2.`object_id` = city3.`object_id` or ca2.`object_id` = city4.`object_id`) and ca2.`value_type_id` = 401)
        left join `city_type` ct on ct.`object_id` = ca2.`value_id`
        left join `city_type_attribute` cta on (cta.`object_id` = ct.`object_id` and cta.`value_type_id` = 1300)
        left join `city_type_string_culture` ctc on (ctc.`id` = cta.`value_id` and ctc.`locale_id`  = #{locale.id})
    </sql>

    <sql id="addressColumns">
        <choose>
            <when test="map.address == true">
                ctc.`value` as `eirc_account_city_type`,   cc.`value` as `eirc_account_city`,
                stc.`value` as `eirc_account_street_type`, sc.`value` as `eirc_account_street`,
                bac.`value` as `eirc_account_building`,    ac.`value` as `eirc_account_apartment`,
                rc.`value`  as `eirc_account_room`
            </when>
            <otherwise>1</otherwise>
        </choose>
    </sql>

    <sql id="otherConditions">
        <if test="map.eircAccount != null">
            <if test="map.eircAccount.id != null">
                and e.`object_id` = #{map.eircAccount.id}
            </if>

            <if test="map.eircAccount.accountNumber != null">
                <choose>
                    <when test="like">
                        and e.`account_number` like concat('%', #{map.eircAccount.accountNumber}, '%')
                    </when>
                    <otherwise>
                        and e.`account_number` = #{map.eircAccount.accountNumber}
                    </otherwise>
                </choose>
            </if>

            <if test="map.eircAccount.person != null">
                <if test="map.eircAccount.person.lastName != null">
                    and e.`last_name` like concat('%', #{map.eircAccount.person.lastName}, '%')
                </if>
                <if test="map.eircAccount.person.firstName != null">
                    and e.`first_name` like concat('%', #{map.eircAccount.person.firstName}, '%')
                </if>
                <if test="map.eircAccount.person.middleName != null">
                    and e.`middle_name` like concat('%', #{map.eircAccount.person.middleName}, '%')
                </if>
            </if>
        </if>
    </sql>

    <sql id="eircAccountColumns">
        e.`pk_id`             as `eirc_account_pk_id`,             e.`object_id`   as `eirc_account_object_id`,
        e.`account_number`    as `eirc_account_number`,            e.`address_id`  as `eirc_account_address_id`,
        e.`address_entity_id` as `eirc_account_address_entity_id`, e.`first_name`  as `eirc_account_first_name`,
        e.`last_name`         as `eirc_account_last_name`,         e.`middle_name` as `eirc_account_middle_name`,
        e.`begin_date`        as `eirc_account_begin_date`,        e.`end_date`    as `eirc_account_end_date`
    </sql>



    <sql id="eircAccountPersonSort">
        e.`last_name`
        <if test="asc">
            ${asc}
        </if>,
        e.`first_name`
        <if test="asc">
            ${asc}
        </if>,
        e.`middle_name`
    </sql>

    <sql id="eircAccountAddressSort">
        `eirc_account_city_type`
        <if test="asc">
            ${asc}
        </if>,
        `eirc_account_city`
        <if test="asc">
            ${asc}
        </if>,
        `eirc_account_street_type`
        <if test="asc">
            ${asc}
        </if>,
        `eirc_account_street`
        <if test="asc">
            ${asc}
        </if>,
        `eirc_account_building`
        <if test="asc">
            ${asc}
        </if>,
        `eirc_account_apartment`
        <if test="asc">
            ${asc}
        </if>,
        `eirc_account_room`
    </sql>

    <select id="selectEircAccounts" parameterType="org.complitex.dictionary.entity.FilterWrapper" resultMap="EircAccount" flushCache="false" useCache="true">
        select
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.eircAccountColumns"/>,
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressColumns"/>
        from `eirc_account` e
        <if test="map.inactive == true or map.all == true">
            inner join (select max(pk_id) as max_pk_id from eirc_account group by object_id) e2 on e.pk_id=e2.max_pk_id
        </if>
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressJoin"/>
        where
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.showModeCondition"/>
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressCondition"/>
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.otherConditions"/>

        <if test="sortProperty != null">
            order by
            <choose>
                <when test="sortProperty == 'eirc_account_person'">
                    <include refid="eircAccountPersonSort"/>
                </when>
                <when test="sortProperty == 'eirc_account_address'">
                    <include refid="eircAccountAddressSort"/>
                </when>
                <otherwise>
                    ${sortProperty}
                </otherwise>
            </choose>
            <if test="asc">
                ${asc}
            </if>
        </if>

        <if test="count > 0">
            limit ${first},${count}
        </if>
    </select>

    <select id="countEircAccounts" parameterType="org.complitex.dictionary.entity.FilterWrapper" resultType="integer" flushCache="false" useCache="true">
        select count(distinct e.`object_id`) from `eirc_account` e
        <if test="map.inactive == true or map.all == true">
            inner join (select max(pk_id) as max_pk_id from eirc_account group by object_id) e2 on e.pk_id=e2.max_pk_id
        </if>
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressJoin"/>
        where
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.showModeCondition"/>
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.addressCondition"/>
        <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.otherConditions"/>
    </select>

    <select id="selectEircAccount" parameterType="long" resultMap="EircAccount" flushCache="false" useCache="true">
        select <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.eircAccountColumns"/> from `eirc_account` e where e.`object_id` = #{id} order by `eirc_account_begin_date` desc
    </select>

    <select id="selectEircAccountByPkId" parameterType="long" resultMap="EircAccount" flushCache="false" useCache="false">
        select <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.eircAccountColumns"/> from `eirc_account` e where e.`pk_id` = #{pkId}
    </select>

    <select id="selectEircAccountsByPkId" parameterType="map" resultMap="EircAccount" flushCache="false" useCache="true">
        select <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.eircAccountColumns"/> from `eirc_account` e where e.`pk_id` in #{pkIds}
    </select>

    <select id="eircAccountNumberExists" parameterType="map" resultType="integer" flushCache="false" useCache="true">
        select 1 from `eirc_account` e where e.`end_date` is null and e.`account_number` = #{accountNumber}
        <if test="objectId != null">
            and e.`object_id` != #{objectId}
        </if>
    </select>

    <select id="eircAccountByAddressExists" parameterType="map" resultType="integer" flushCache="false" useCache="true">
        select 1 from `eirc_account` e where e.`address_id` = #{addressId} and e.`address_entity_id` = #{addressEntityId} and e.`end_date` is null
        <if test="objectId != null">
            and e.`object_id` != #{objectId}
        </if>
    </select>


    <select id="selectEircAccountByAddress" parameterType="ru.flexpay.eirc.dictionary.entity.Address" resultMap="EircAccount" flushCache="false" useCache="true">
        select <include refid="ru.flexpay.eirc.eirc_account.service.EircAccountBean.eircAccountColumns"/> from `eirc_account` e where e.`address_id` = #{id} and e.`address_entity_id` = #{entity.id} and e.`end_date` is null
    </select>

    <insert id="insertEircAccount" parameterType="ru.flexpay.eirc.eirc_account.entity.EircAccount" keyProperty="pkId" useGeneratedKeys="true" flushCache="true">
        insert into `eirc_account` (`object_id`, `account_number`, `address_id`, `address_entity_id`,
                                    `first_name`, `last_name`, `middle_name`, `begin_date`, `end_date`)
                            values (#{id}, #{accountNumber}, #{address.id}, #{address.entity.id},
                                    #{person.firstName}, #{person.lastName}, #{person.middleName}, #{beginDate}, #{endDate})
    </insert>

    <update id="updateEndDate" parameterType="ru.flexpay.eirc.eirc_account.entity.EircAccount" flushCache="true">
        update `eirc_account` set `end_date` = #{endDate} where `pk_id` = #{pkId}
    </update>

</mapper>
